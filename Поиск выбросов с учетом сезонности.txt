Для поиска выбросов в данных временных рядов с учётом сезонности можно использовать метод Seasonal Decomposition of Time Series (STL), который позволяет разделить временной ряд на три компоненты: тренд, сезонность и остатки (residuals). Выбросы можно выявить на основе анализа остаточной компоненты, которая представляет собой отклонения от тренда и сезонности.

Ниже приведен код для поиска выбросов во временных рядах с учётом сезонности.

Установка необходимых библиотек:
bash
Копировать код
pip install numpy pandas matplotlib statsmodels
Код:
python
Копировать код
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import STL
from scipy import stats

# Генерация или загрузка данных
np.random.seed(42)
# Генерация синтетических данных с трендом, сезонностью и выбросами
n = 150
trend = np.linspace(10, 50, n)  # Линейный тренд
seasonal = 10 * np.sin(np.linspace(0, 3 * np.pi, n))  # Синусоидальная сезонность
noise = np.random.normal(0, 2, n)  # Случайный шум
temperatures = trend + seasonal + noise
temperatures[30] = 80  # Искусственный выброс
temperatures[120] = -10  # Искусственный выброс

# Визуализация временного ряда
plt.figure(figsize=(10, 6))
plt.plot(temperatures, label="Температура с выбросами")
plt.title('Временной ряд с выбросами')
plt.legend()
plt.show()

# Поиск выбросов с использованием STL
series = pd.Series(temperatures)

# Применение сезонной декомпозиции с помощью STL
stl = STL(series, seasonal=13)  # Период сезонности можно варьировать в зависимости от данных
result = stl.fit()

# Извлечение компонент: тренд, сезонность, остатки
trend = result.trend
seasonal = result.seasonal
residual = result.resid

# Оценка выбросов на основе остаточной компоненты
# Используем Z-оценку для выявления выбросов: если остаток значительно отклоняется от среднего, считаем его выбросом
z_scores = np.abs(stats.zscore(residual))
outliers = np.where(z_scores > 3)[0]  # Индексы выбросов, если Z-оценка > 3

# Визуализация компонентов и выбросов
plt.figure(figsize=(10, 8))

plt.subplot(4, 1, 1)
plt.plot(series, label="Оригинальные данные")
plt.title('Оригинальные данные')
plt.legend()

plt.subplot(4, 1, 2)
plt.plot(trend, label="Тренд", color="orange")
plt.title('Тренд')
plt.legend()

plt.subplot(4, 1, 3)
plt.plot(seasonal, label="Сезонность", color="green")
plt.title('Сезонность')
plt.legend()

plt.subplot(4, 1, 4)
plt.plot(residual, label="Остатки", color="red")
plt.scatter(outliers, residual[outliers], color='black', label="Выбросы", zorder=5)
plt.title('Остатки с выбросами')
plt.legend()

plt.tight_layout()
plt.show()

# Вывод индексов выбросов
print(f"Индексы выбросов: {outliers}")
Шаги:
Генерация данных: В коде создаются синтетические данные с трендом, сезонностью и выбросами. Реальные данные можно загрузить и подставить вместо сгенерированных.
STL-декомпозиция: Данные разбиваются на три компоненты — тренд, сезонность и остатки. Это позволяет учесть сезонные колебания и тренды при анализе данных.
Поиск выбросов: Для выявления выбросов используется Z-оценка остаточной компоненты. Значения, которые значительно отклоняются от среднего остатка (например, Z-score > 3), считаются выбросами.
Визуализация: Отображаются оригинальные данные, компоненты тренда, сезонности, остатков, а также выбросы.
Результат:
Код выявляет выбросы, которые не соответствуют нормальному поведению временного ряда с учетом сезонности и тренда.
На графике остаточной компоненты выбросы отмечены чёрными точками.
Этот подход можно легко адаптировать под реальные временные ряды и корректировать параметры в зависимости от характера данных.


Отдельная функция

Конечно! Вот код, в котором поиск выбросов с учётом сезонности выделен в отдельную функцию:

python
Копировать код
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import STL
from scipy import stats

# Функция для поиска выбросов с учётом сезонности
def find_outliers_with_seasonality(data, seasonal_period=13, z_threshold=3):
    """
    Находит выбросы во временных рядах с учётом сезонности, используя STL-декомпозицию и Z-оценку.

    :param data: Массив или pandas Series с временными рядами.
    :param seasonal_period: Период сезонности для STL-декомпозиции.
    :param z_threshold: Порог для Z-оценки для определения выбросов.
    :return: Индексы выбросов, результат STL-декомпозиции (тренд, сезонность, остатки).
    """
    series = pd.Series(data)

    # Применение сезонной декомпозиции с помощью STL
    stl = STL(series, seasonal=seasonal_period)
    result = stl.fit()

    # Извлечение компонент: тренд, сезонность, остатки
    trend = result.trend
    seasonal = result.seasonal
    residual = result.resid

    # Оценка выбросов на основе остаточной компоненты
    z_scores = np.abs(stats.zscore(residual))
    outliers = np.where(z_scores > z_threshold)[0]  # Индексы выбросов

    # Визуализация компонентов и выбросов
    plt.figure(figsize=(10, 8))

    plt.subplot(4, 1, 1)
    plt.plot(series, label="Оригинальные данные")
    plt.title('Оригинальные данные')
    plt.legend()

    plt.subplot(4, 1, 2)
    plt.plot(trend, label="Тренд", color="orange")
    plt.title('Тренд')
    plt.legend()

    plt.subplot(4, 1, 3)
    plt.plot(seasonal, label="Сезонность", color="green")
    plt.title('Сезонность')
    plt.legend()

    plt.subplot(4, 1, 4)
    plt.plot(residual, label="Остатки", color="red")
    plt.scatter(outliers, residual[outliers], color='black', label="Выбросы", zorder=5)
    plt.title('Остатки с выбросами')
    plt.legend()

    plt.tight_layout()
    plt.show()

    # Возвращение индексов выбросов и результата STL-декомпозиции
    return outliers, trend, seasonal, residual

# Генерация данных
np.random.seed(42)
n = 150
trend = np.linspace(10, 50, n)  # Линейный тренд
seasonal = 10 * np.sin(np.linspace(0, 3 * np.pi, n))  # Синусоидальная сезонность
noise = np.random.normal(0, 2, n)  # Случайный шум
temperatures = trend + seasonal + noise
temperatures[30] = 80  # Искусственный выброс
temperatures[120] = -10  # Искусственный выброс

# Поиск выбросов с помощью функции
outliers, trend, seasonal, residual = find_outliers_with_seasonality(temperatures)

# Вывод индексов выбросов
print(f"Индексы выбросов: {outliers}")
Параметры функции:
data: временной ряд (может быть в формате массива или pandas Series).
seasonal_period: период сезонности для STL-декомпозиции (по умолчанию 13).
z_threshold: порог для Z-оценки, выше которого значения считаются выбросами (по умолчанию 3).
Возвращаемые значения:
outliers: индексы найденных выбросов.
trend: трендовая составляющая временного ряда.
seasonal: сезонная составляющая временного ряда.
residual: остаточная составляющая, на основе которой определяются выбросы.
Этот код можно адаптировать для использования с любыми временными рядами.



Период сезонности в году:
Период сезонности в временных рядах, выраженных в месяцах, зависит от типа сезонных колебаний:
Годовая сезонность: Если в данных наблюдается годовой цикл, период сезонности будет равен 12 месяцам (один год). Это стандартный период для данных с ежемесячными наблюдениями, например, температура, продажи и т.д.
Квартальная сезонность: Для данных, которые имеют колебания внутри года на квартальной основе, период сезонности будет равен 3 месяцам (один квартал).
Полугодовая сезонность: Если данные имеют полугодовой цикл, период будет равен 6 месяцам.
Для большинства временных рядов с ежемесячной сезонностью период чаще всего составляет 12 месяцев.
Пример:
Продажи, которые растут каждый декабрь (сезон новогодних покупок), будут иметь период сезонности в 12 месяцев.