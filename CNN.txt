Требуется быстрое извлечение локальных паттернов. Напиши код прогнозирования с использованием нейронный сети временных рядов CNN с выделение локальных паттернов на графике.

Требуется быстрое извлечение локальных паттернов. Напиши код прогнозирования с использованием нейронный сети временных рядов CNN с выделение локальных паттернов на графике.
ChatGPT сказал:
ChatGPT
Если необходимо быстрое извлечение локальных паттернов во временных рядах, сверточная нейронная сеть (CNN) может быть хорошим решением. CNN эффективны в обнаружении локальных паттернов благодаря применению сверток к данным. Ниже представлен пример кода для прогнозирования временных рядов с использованием 1D CNN.

Установка необходимых библиотек:
bash
Копировать код
pip install tensorflow numpy matplotlib scikit-learn
Код:
python
Копировать код
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, Dense, Flatten, Dropout

# Генерация или загрузка данных
# Предположим, что данные о температуре хранятся в массиве temperatures
np.random.seed(42)
temperatures = np.random.uniform(low=-10, high=30, size=(72,))

# Масштабирование данных
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_temperatures = scaler.fit_transform(temperatures.reshape(-1, 1))

# Создание временных окон
def create_dataset(data, time_steps=5):
    X, y = [], []
    for i in range(len(data) - time_steps):
        X.append(data[i:(i + time_steps), 0])
        y.append(data[i + time_steps, 0])
    return np.array(X), np.array(y)

time_steps = 5
X, y = create_dataset(scaled_temperatures, time_steps)

# Добавляем размерность для модели CNN (samples, time_steps, features)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Разделение на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Создание модели CNN
model = Sequential()

# Сверточный слой
model.add(Conv1D(filters=64, kernel_size=2, activation='relu', input_shape=(time_steps, 1)))
model.add(Dropout(0.2))  # Dropout для предотвращения переобучения

# Преобразование в вектор
model.add(Flatten())

# Полносвязный слой для предсказаний
model.add(Dense(50, activation='relu'))
model.add(Dense(1))

# Компиляция модели
model.compile(optimizer='adam', loss='mse')

# Обучение модели
history = model.fit(X_train, y_train, epochs=20, batch_size=16, validation_data=(X_test, y_test))

# Прогнозирование
y_pred = model.predict(X_test)

# Инвертирование масштабирования для получения исходных значений
y_pred_inverse = scaler.inverse_transform(y_pred)
y_test_inverse = scaler.inverse_transform(y_test.reshape(-1, 1))

# Визуализация результатов: прогноз и фактические значения
plt.plot(y_test_inverse, label='Actual')
plt.plot(y_pred_inverse, label='Predicted')
plt.title('Temperature Prediction with CNN')
plt.legend()
plt.show()

# Визуализация локальных паттернов на тестовых данных
# Пример взятия первого окна данных для визуализации
first_window = X_test[0].squeeze()  # Убираем лишнее измерение

plt.figure(figsize=(10, 4))
plt.plot(first_window, label='First Test Window (Local Patterns)')
plt.title('Local Patterns in the First Test Window')
plt.legend()
plt.show()
Объяснение шагов:
Подготовка данных: данные масштабируются с помощью MinMaxScaler, затем создаются временные окна (например, с 5 шагами).
Модель CNN: сверточный слой (1D CNN) применяется к временным рядам для выделения локальных паттернов. За ним следуют Dropout для регуляризации и полносвязный слой для предсказаний.
Обучение: модель обучается на тренировочной выборке, а затем прогнозирует значения на тестовой выборке.
Визуализация:
Прогнозируемые значения сравниваются с фактическими.
Визуализируются локальные паттерны в первом окне тестовых данных с помощью графика.
Этот код эффективно использует CNN для выделения локальных временных паттернов, и можно легко адаптировать его к любым временным рядам, изменив параметры модели и количество временных шагов.