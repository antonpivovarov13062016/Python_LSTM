Напиши код прогнозирования с использованием нейронный сети временных рядов GRU.
ChatGPT сказал:
ChatGPT
Ниже приведен пример кода для прогнозирования временных рядов с использованием нейронной сети на основе GRU (Gated Recurrent Unit). GRU — это упрощенная версия LSTM, которая требует меньше вычислительных ресурсов и способна работать с малыми наборами данных.

Установка необходимых библиотек:
bash
Копировать код
pip install tensorflow numpy matplotlib scikit-learn
Код:
python
Копировать код
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GRU, Dense, Dropout

# Генерация или загрузка данных
# Предположим, что данные о температуре хранятся в массиве temperatures
np.random.seed(42)
temperatures = np.random.uniform(low=-10, high=30, size=(72,))

# Масштабирование данных
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_temperatures = scaler.fit_transform(temperatures.reshape(-1, 1))

# Создание временных окон
def create_dataset(data, time_steps=5):
    X, y = [], []
    for i in range(len(data) - time_steps):
        X.append(data[i:(i + time_steps), 0])
        y.append(data[i + time_steps, 0])
    return np.array(X), np.array(y)

time_steps = 5
X, y = create_dataset(scaled_temperatures, time_steps)

# Добавляем размерность для модели GRU (samples, time_steps, features)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Разделение на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Создание модели GRU
model = Sequential()
model.add(GRU(50, input_shape=(time_steps, 1)))
model.add(Dropout(0.2))  # Регуляризация Dropout для уменьшения переобучения
model.add(Dense(1))  # Выходной слой для прогнозирования

# Компиляция модели
model.compile(optimizer='adam', loss='mse')

# Обучение модели
history = model.fit(X_train, y_train, epochs=20, batch_size=16, validation_data=(X_test, y_test))

# Прогнозирование
y_pred = model.predict(X_test)

# Инвертирование масштабирования для получения исходных значений
y_pred_inverse = scaler.inverse_transform(y_pred)
y_test_inverse = scaler.inverse_transform(y_test.reshape(-1, 1))

# Визуализация результатов
plt.plot(y_test_inverse, label='Actual')
plt.plot(y_pred_inverse, label='Predicted')
plt.title('Temperature Prediction with GRU')
plt.legend()
plt.show()
Объяснение шагов:
Подготовка данных: данные масштабируются с помощью MinMaxScaler, а затем создаются окна временных шагов для подачи в GRU.
Модель GRU: модель включает один слой GRU с 50 нейронами и один выходной слой для прогнозирования. Также добавлен Dropout для предотвращения переобучения.
Обучение: модель обучается на тренировочной выборке с использованием MSE (Mean Squared Error) в качестве функции потерь.
Прогнозирование: выполняется прогноз на тестовой выборке, и результаты масштабируются обратно к исходным значениям.
Визуализация: фактические и предсказанные значения температуры отображаются на графике для сравнения.
Этот код можно адаптировать для любых временных рядов, изменив количество временных шагов и параметры модели.